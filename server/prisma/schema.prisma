// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  OWNER
  PROVIDER
}

enum ServiceType {
  WALKING
  SITTING
  GROOMING
  VETERINARIAN_VISIT
  TAXI
  TRAINING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// Models
model User {
  id          String   @id @default(cuid()) @db.VarChar(36)
  email       String   @unique
  password    String   @map("password_hash")
  role        UserRole
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  profile        Profile?
  services       Service[]
  bookings       Booking[]
  ownedReviews   Review[] @relation("reviewOwner")
  providerReviews Review[] @relation("reviewProvider")
  conversations  Conversation[] @relation("ConversationParticipants")
  sentMessages   Message[] @relation("MessageSender")

  @@map("users")
}

model Profile {
  id                       String  @id @default(cuid()) @db.VarChar(36)
  userId                   String  @unique @map("user_id") @db.VarChar(36)
  firstName                String? @map("first_name")
  lastName                 String? @map("last_name")
  avatarUrl                String? @map("avatar_url")
  bio                      String? // Only for PROVIDER
  location                 String? @map("location") // Only for PROVIDER
  overallAverageRating     Float   @default(0) @map("overall_average_rating")
  stripeAccountId          String? @unique @map("stripe_account_id")
  stripeOnboardingComplete Boolean @default(false) @map("stripe_onboarding_complete")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Service {
  id            String  @id @default(cuid()) @db.VarChar(36)
  providerId    String  @map("provider_id") @db.VarChar(36)
  serviceType   ServiceType @map("service_type")
  title         String
  description   String
  price         Decimal @db.Decimal(10, 2)
  availability  Json    @default("{}")
  averageRating Float   @default(0) @map("average_rating")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  provider  User      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  reviews   Review[]

  // Constraints
  @@map("services")
}

model Booking {
  id             String   @id @default(cuid()) @db.VarChar(36)
  ownerId        String   @map("owner_id") @db.VarChar(36)
  serviceId      String   @map("service_id") @db.VarChar(36)
  bookingTime    DateTime @map("booking_time")
  status         BookingStatus @default(PENDING)
  paymentIntentId String? @unique @map("payment_intent_id")
  paymentStatus  PaymentStatus @default(PENDING)
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  owner    User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  review   Review?

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid()) @db.VarChar(36)
  bookingId String   @unique @map("booking_id") @db.VarChar(36)
  serviceId String   @map("service_id") @db.VarChar(36)
  ownerId   String   @map("owner_id") @db.VarChar(36)
  providerId String  @map("provider_id") @db.VarChar(36)
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service  Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  owner    User    @relation("reviewOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  provider User    @relation("reviewProvider", fields: [providerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Chat System Models
model Conversation {
  id          String   @id @default(cuid()) @db.VarChar(36)
  participants User[]  @relation("ConversationParticipants")
  messages    Message[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid()) @db.VarChar(36)
  conversationId String      @map("conversation_id") @db.VarChar(36)
  senderId       String      @map("sender_id") @db.VarChar(36)
  content        String
  createdAt      DateTime    @default(now()) @map("created_at")

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}
