import { PrismaClient, UserRole, ServiceType } from '@prisma/client';
import { faker } from '@faker-js/faker';
import bcrypt from 'bcryptjs';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const db = new PrismaClient();
const SALT_ROUNDS = 12;

async function main() {
  console.log('üå± Starting database seed...');

  // Create a shared hashed password for all users
  const hashedPassword = await bcrypt.hash('password123', SALT_ROUNDS);
  console.log('‚úÖ Password hashed');

  // List of available avatars
  const avatarFiles = [
    '0450249b131eec36dc8333b7cf847bc4.webp',
    '06d29f74c2f85239efe3f9ade1b96da7.webp',
    '098d5b19a0870d95bee0cdbcef632be1.webp',
    '112413f070536d15170606f2d00aa15d.webp',
    '119d9abaee7a1e987571f0fe776bd1a5.webp',
    '1a270860bac2c66b434968a3047822e3.webp',
    '1a3318330cf1734feb84887e9453fb1b.webp',
    '1bab427466457e745328f6eb8fa227e1.webp',
    '1c9a4dd0bbd964e3eecbd40caf3b7e37.webp',
    '1dd1b479633b29ff2fd9d6644581f394.webp',
    '2244af71ad0c25f2cb0a8efa167491fb.webp',
    '237d3876ef98d5364ed1326813f4ed5b.webp',
    '261cb9a6ae028b862eaf692b10033fb7.webp',
    '27d73d5efa51661b5feb1e29cc389257.webp',
    '2866b308b3c70e895e34b3130f10abf3.webp',
    '2b04cc0b930f82afe6c38d3209dcbdfd.webp',
    '2d81c3469090a90daff20560a129b182.webp',
    '2fafd2ca0fa23ca91ec778674c26081a.webp',
    '2fb0e578a8ab6f8073092ae637c87835.webp',
    '321f5bcb6efc56013d67ae101f196eaf.webp',
    '33642b1fa839338a7d53d78336a45ff0.webp',
    '386f22acf2f226c3a9ad7ad66fdce7a6.webp',
    '40687889cb61a06b242aafb9e02f5204.webp',
    '4184423b57c070204a1942282818dc0c.webp',
    '439620a6c05132c82d67fc1593a7e19a.webp',
    '44198079c5211172a61405b5049f3bfb.webp',
    '44b312165ea1bb924bdccf01bf1bb443.webp',
    '44f647f9e3c4767d3b83e89e67917f41.webp',
    '466989c631bca15c46ae9c1e62269a5a.webp',
    '4a8eb80a6f610949b28dd91f45e7d6e2.webp',
    '4b59f1b8af326b6381c39ab29c3612d6.webp',
    '4dfaa7ded74ac66557b5940f7290c840.webp',
    '50382765fd5648c7876d91cc37b27394.webp',
    '5c9a412b4e80d08303731bca471d3b63.webp',
    '5cd1cd3d1851e162616256ebe2a4c30a.webp',
    '60467e1ae6f97acb8964f5aa617c7ecb.webp',
    '622e4c7767d4eb0307179d6dfda9248b.webp',
    '644dfc35027924a6e5dfbcad653be697.webp',
    '67b732b96785fd368415dd82951466c1.webp',
    '6914da7a3557e685836a71e635c237b9.webp',
    '69c04d9c4dc60b59bac65938e070e7cf.webp',
    '6ade325cd4c136112f25e63f888eb7de.webp',
    '6bde7f630b3933ee1b92b0ec2df665c2.webp',
    '6ffe2b7df2b99ba5cc2c65692dd0d568.webp',
    '706e8643277a95c3f80005f70cf53cb9.webp',
    '70a23294beb91b4ad5a439e2c6ea5a6d.webp',
    '76891f0bd337c6ee10f84067d7808044.webp',
    '78529e2ec8eb4a2eb2fb961e04915b0a.webp',
    '78c7bf3d348d505f15d332f9a58092f7.webp',
    '7ae3a0ffcf9eb41156244fbaa3588de7.webp',
    '7c9062905b4ce3d276dfffd2b34bbb49.webp',
    '7d24c27f40be0d43618f6d49e26a3288.webp',
    '8654c911c90383bb42a6cdddd66014c5.webp',
    '869f67a992bb6ca4cb657fb9fc634893.webp',
    '8940e8ea369def14e82f05a5fee994b9.webp',
    '897cda132d24997b106d57ccd0530927.webp',
    '899e2a12b136acdc5366e76d15d83244.webp',
    '8c0e0a2a3a1c7068ea221aa8a0f429e0.webp',
    '8fcd9a7c3003dd0ad23e371475d130b3.webp',
    '92770c61168481c94e1ba43df7615fd8.webp',
    '944c5ba154e0489274504f38d01bcfaf.webp',
    '94f5ac7e7b78495be7df7e5ca427fd5c.webp',
    '9854663aec5741bbbe84290b6edc0aed.webp',
    '9d119d757ff7d7b36b9d71b86d973fbe.webp',
    'a2d4e522bd8e359b60d4e40a6c50fa6e.webp',
    'a47cfeaf97371ec735a870781978fcf5.webp',
    'a599c01dec11cb6099c6aacafe3bc5a9.webp',
    'b00e1ebc65fc7f2c53c9a9a955a49be5.webp',
    'b0a4b1922813b989103a3616d7111562.webp',
    'b89db8099e05245d0f3e19be6beeafca.webp',
    'b8c1cb5042e9b54e27d18d6ecfb46087.webp',
    'baa928fef9b0f2e838263dd88eefc707.webp',
    'bb3d2a58ea153b635a4951d82affb4db.webp',
    'bb8c76bcb73cf00e7d4ab920447a365c.webp',
    'bc61d859626dbb47d69f86e10421c50e.webp',
    'bc8e6056aa877de4ae5ab1321f776ade.webp',
    'c0e1c0e6224c14a140748d8cef481883.webp',
    'c29e12118b27e54e8883db0b98c610df.webp',
    'c33237da3438494d1abc67166196484e.webp',
    'c6b7069df1a634e3db7ba5e9b923d3a8.webp',
    'cacf6ab4ea79648699479021e7892224.webp',
    'cae99bb14b21ec41ecf03b58f59ff292.webp',
    'd1499909450ba526d5297e3ebc7f6d07.webp',
    'd36865e08723cc1b764e084873e53662.webp',
    'd447a9fd5010652f6c0911fbe9c662c6.webp',
    'd7d9e6977ad4053c3dfab772ba1d2c1f.webp',
    'dae17037af459cca4ed1b8a474e7428e.webp',
    'e2cb7b8c41eba64187df1fc6128a3f8e.webp',
    'e6f79cdf2a45c0eb58b3f93407361989.webp',
    'ecf088e6a05f2c8d5c041384e3568b46.webp',
    'ed7055b68adec22bfa8a88d441e83e9a.webp',
    'ee7173cf2acfcb909ead7a23f3e01493.webp',
    'eecd70bbeb08e2fc531ca498b9fc4f0d.webp',
    'ef4a7e86005e0e9e49dbbae2280c1f10.webp',
    'f0474688ec350e08543f55b3771dcada.webp',
    'f0fb14746f3fc6020a0e1afdd089a4fb.webp',
    'f118c882025868bca7499ea0f41bc43b.webp',
    'f135ea474f1320d13883e194685b4d8a.webp',
    'f3382b5fa7e14fcab30d4279f203c83a.webp',
    'f725eb23b6db39a55736f1428f6a76c5.webp',
  ];

  // Helper function to get a random avatar
  const getRandomAvatar = () => {
    const avatar = faker.helpers.arrayElement(avatarFiles);
    return `/avatars/${avatar}`;
  };

  // Helper function to get service-specific images from Unsplash
  const getServiceImage = (serviceType: ServiceType): string => {
    const serviceImages: Record<ServiceType, string[]> = {
      [ServiceType.WALKING]: [
        'https://images.unsplash.com/photo-1552053831-71594a27632d?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1543466835-00a7907e9de1?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1517849845537-4d257902454a?w=800&h=600&fit=crop',
      ],
      [ServiceType.SITTING]: [
        'https://images.unsplash.com/photo-1551717743-49959800b1f6?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1574158622682-e40e69881006?w=800&h=600&fit=crop',
      ],
      [ServiceType.GROOMING]: [
        'https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1598300042247-d088f8ab3a91?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1522276498395-f4f68f7f8454?w=800&h=600&fit=crop',
      ],
      [ServiceType.VETERINARIAN_VISIT]: [
        'https://images.unsplash.com/photo-1450778869180-41d0601e046e?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1578164252419-74dcee31bfe3?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?w=800&h=600&fit=crop',
      ],
      [ServiceType.TAXI]: [
        'https://images.unsplash.com/photo-1583511655857-d19b40a7a54e?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1519099064598-86a67c52577e?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?w=800&h=600&fit=crop',
      ],
      [ServiceType.TRAINING]: [
        'https://images.unsplash.com/photo-1574158622682-e40e69881006?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1593134257782-e89567b7718a?w=800&h=600&fit=crop',
        'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?w=800&h=600&fit=crop',
      ],
    };
    return faker.helpers.arrayElement(serviceImages[serviceType]);
  };

  // Helper function to generate realistic service data
  const generateServiceData = (serviceType: ServiceType) => {
    const serviceData: Record<ServiceType, { titles: string[]; descriptions: string[] }> = {
      [ServiceType.WALKING]: {
        titles: [
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–≥—É–ª —Å–æ–±–∞–∫',
          '–ü—Ä–æ–≥—É–ª–∫–∞ —Å –≤–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–µ–º',
          '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –¥–ª—è —Å–æ–±–∞–∫',
          '–í—ã–≥—É–ª —Å–æ–±–∞–∫ –≤ –ø–∞—Ä–∫–µ',
          '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞',
        ],
        descriptions: [
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–≥—É–ª —Å–æ–±–∞–∫ —Å —É—á–µ—Ç–æ–º –∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä–æ–¥.',
          '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å –æ–ø—ã—Ç–Ω—ã–º —Å–æ–±–∞–∫–æ–≤–æ–¥–æ–º. –ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ—Ä–æ–¥–∞–º–∏.',
          '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Å –∏–≥—Ä–∞–º–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω—ã—Ö —Å–æ–±–∞–∫.',
          '–ü—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—ã–≥—É–ª–∞. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.',
          '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –ø–∏—Ç–æ–º—Ü—É. –ü—Ä–æ–≥—É–ª–∫–∏ –ø–æ —É–¥–æ–±–Ω–æ–º—É –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫—É.',
        ],
      },
      [ServiceType.SITTING]: {
        titles: [
          '–î–æ–º–∞—à–Ω–∏–π –ø—Ä–∏—Å–º–æ—Ç—Ä –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º',
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Ç—Ç–µ—Ä',
          '–ü—Ä–∏—Å–º–æ—Ç—Ä —Å –∑–∞–±–æ—Ç–æ–π',
          '–°–∏—Ç—Ç–∏–Ω–≥ –¥–ª—è —Å–æ–±–∞–∫ –∏ –∫–æ—à–µ–∫',
          '–î–Ω–µ–≤–Ω–æ–π –ø—Ä–∏—Å–º–æ—Ç—Ä',
        ],
        descriptions: [
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏—Å–º–æ—Ç—Ä –∑–∞ –≤–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–µ–º –¥–æ–º–∞. –í–∫–ª—é—á–∞–µ—Ç –∫–æ—Ä–º–ª–µ–Ω–∏–µ, –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –∏–≥—Ä—ã.',
          '–û–ø—ã—Ç–Ω—ã–π —Å–∏—Ç—Ç–µ—Ä —Å –±–æ–ª—å—à–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã. –í–∞—à –ø–∏—Ç–æ–º–µ—Ü –±—É–¥–µ—Ç –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö.',
          '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π –ø—Ä–∏—Å–º–æ—Ç—Ä —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.',
          '–ü—Ä–∏—Å–º–æ—Ç—Ä –∫–∞–∫ –¥–ª—è —Å–æ–±–∞–∫, —Ç–∞–∫ –∏ –¥–ª—è –∫–æ—à–µ–∫. –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.',
          '–î–Ω–µ–≤–Ω–æ–π –ø—Ä–∏—Å–º–æ—Ç—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–≥—É–ª–∞. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.',
        ],
      },
      [ServiceType.GROOMING]: {
        titles: [
          '–ü–æ–ª–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥ —Å–æ–±–∞–∫',
          '–°—Ç—Ä–∏–∂–∫–∞ –∏ —É—Ö–æ–¥ –∑–∞ —à–µ—Ä—Å—Ç—å—é',
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥',
          '–£—Ö–æ–¥ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º',
          '–ú–æ–±–∏–ª—å–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥',
        ],
        descriptions: [
          '–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –≥—Ä—É–º–∏–Ω–≥–∞: —Å—Ç—Ä–∏–∂–∫–∞, –º—ã—Ç—å–µ, —Å—É—à–∫–∞, —Å—Ç—Ä–∏–∂–∫–∞ –∫–æ–≥—Ç–µ–π. –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ.',
          '–°—Ç—Ä–∏–∂–∫–∞ –∏ —É—Ö–æ–¥ –∑–∞ —à–µ—Ä—Å—Ç—å—é –≤—Å–µ—Ö –ø–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ—Å–º–µ—Ç–∏–∫—É –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö.',
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫. –ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.',
          '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –≤–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–µ–º. –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.',
          '–ú–æ–±–∏–ª—å–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥ —Å –≤—ã–µ–∑–¥–æ–º –Ω–∞ –¥–æ–º. –£–¥–æ–±–Ω–æ –¥–ª—è –≤–∞—Å –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞.',
        ],
      },
      [ServiceType.VETERINARIAN_VISIT]: {
        titles: [
          '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä –Ω–∞ –¥–æ–º—É',
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞',
          '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä',
          '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏',
          '–î–æ–º–∞—à–Ω–∏–π –≤–∏–∑–∏—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞',
        ],
        descriptions: [
          '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä –Ω–∞ –¥–æ–º—É. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—Ä–∞—á –ø—Ä–æ–≤–µ–¥–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.',
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–ø—ã—Ç–Ω–æ–≥–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–¥–æ—Ä–æ–≤—å—è –∏ —É—Ö–æ–¥–∞ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º.',
          '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É—Ö–æ–¥—É –∏ –ø–∏—Ç–∞–Ω–∏—é.',
          '–ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥ –Ω–∞ –¥–æ–º—É. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã.',
          '–£–¥–æ–±–Ω—ã–π –≤–∏–∑–∏—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –Ω–∞ –¥–æ–º. –ë–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞, —Å –ø–æ–ª–Ω—ã–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –≤—Ä–∞—á–∞.',
        ],
      },
      [ServiceType.TAXI]: {
        titles: [
          '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤',
          '–¢–∞–∫—Å–∏ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö',
          '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–≤–æ–∑–∫–∞',
          '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–µ —Ç–∞–∫—Å–∏',
          '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–µ—Ä–µ–≤–æ–∑–∫–∞',
        ],
        descriptions: [
          '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –û–ø—ã—Ç–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.',
          '–£–¥–æ–±–Ω–æ–µ —Ç–∞–∫—Å–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ö–æ–º—Ñ–æ—Ä—Ç –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.',
          '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–≤–æ–∑–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∫–ª–∏–Ω–∏–∫—É, –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫—É –∏–ª–∏ –¥–æ–º–æ–π. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.',
          '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–µ —Ç–∞–∫—Å–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —É—Å–ª–æ–≤–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö.',
          '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–µ—Ä–µ–≤–æ–∑–∫–∞ —Å –∑–∞–±–æ—Ç–æ–π –æ –ø–∏—Ç–æ–º—Ü–µ. –û–ø—ã—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.',
        ],
      },
      [ServiceType.TRAINING]: {
        titles: [
          '–î—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–æ–±–∞–∫',
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
          '–ö—É—Ä—Å –ø–æ—Å–ª—É—à–∞–Ω–∏—è',
          '–î—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞ —â–µ–Ω–∫–æ–≤',
          '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è',
        ],
        descriptions: [
          '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞ —Å–æ–±–∞–∫ –≤—Å–µ—Ö –ø–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è.',
          '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º. –û–ø—ã—Ç–Ω—ã–π –∫–∏–Ω–æ–ª–æ–≥ –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å–ø–∏—Ç–∞—Ç—å –ø–æ—Å–ª—É—à–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.',
          '–ö—É—Ä—Å –±–∞–∑–æ–≤–æ–≥–æ –ø–æ—Å–ª—É—à–∞–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–±–∞–∫ –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.',
          '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è —â–µ–Ω–∫–æ–≤. –ó–∞–ª–æ–∂–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å —Ä–∞–Ω–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.',
          '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è. –†–∞–±–æ—Ç–∞–µ–º —Å –∞–≥—Ä–µ—Å—Å–∏–µ–π, –ª–∞–µ–º, —Å—Ç—Ä–∞—Ö–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏.',
        ],
      },
    };
    return serviceData[serviceType];
  };

  // Helper function to get pet images
  const getPetImage = (petType: string): string => {
    const petImages: Record<string, string[]> = {
      dog: [
        'https://images.unsplash.com/photo-1537151608828-ea2b11777ee8?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1587402092301-725e37c70fd8?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1561037404-61cd46aa615b?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1587300003388-59208cc962cb?w=400&h=400&fit=crop',
      ],
      cat: [
        'https://images.unsplash.com/photo-1513245543132-31f507417b26?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1520087619250-584c0cbd35f8?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1529778873920-7da60d5e8fd2?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1513360371669-4adf3dd7dff8?w=400&h=400&fit=crop',
      ],
      bird: [
        'https://images.unsplash.com/photo-1452570053594-1b985d6ea890?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1511735111819-9a3f7709049c?w=400&h=400&fit=crop',
      ],
      rabbit: [
        'https://images.unsplash.com/photo-1585110396000-c9ffd4e4b308?w=400&h=400&fit=crop',
        'https://images.unsplash.com/photo-1560114928-40f1f1eb26a0?w=400&h=400&fit=crop',
      ],
    };
    return faker.helpers.arrayElement(petImages[petType] || petImages.dog);
  };

  // Pet types and breeds
  const petTypes = ['dog', 'cat', 'bird', 'rabbit'];
  const dogBreeds = ['–õ–∞–±—Ä–∞–¥–æ—Ä', '–û–≤—á–∞—Ä–∫–∞', '–•–∞—Å–∫–∏', '–†–µ—Ç—Ä–∏–≤–µ—Ä', '–ë–∏–≥–ª—å', '–ô–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä', '–¢–∞–∫—Å–∞', '–ë—É–ª—å–¥–æ–≥'];
  const catBreeds = ['–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è', '–ü–µ—Ä—Å–∏–¥—Å–∫–∞—è', '–ú–µ–π–Ω-–∫—É–Ω', '–°—Ñ–∏–Ω–∫—Å', '–°–∏–∞–º—Å–∫–∞—è', '–†—É—Å—Å–∫–∞—è –≥–æ–ª—É–±–∞—è', '–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è –≤–∏—Å–ª–æ—É—Ö–∞—è'];
  const birdBreeds = ['–ö–∞–Ω–∞—Ä–µ–π–∫–∞', '–ü–æ–ø—É–≥–∞–π', '–í–æ–ª–Ω–∏—Å—Ç—ã–π –ø–æ–ø—É–≥–∞–π—á–∏–∫'];
  const rabbitBreeds = ['–ö–∞—Ä–ª–∏–∫–æ–≤—ã–π', '–ê–Ω–≥–æ—Ä—Å–∫–∏–π', '–í–∏—Å–ª–æ—É—Ö–∏–π'];

  // Create Seekers (OWNER role) - 50 users
  console.log('üìù Creating 50 OWNER users...');
  for (let i = 0; i < 50; i++) {
    const user = await db.user.create({
      data: {
        email: faker.internet.email(),
        password: hashedPassword,
        role: UserRole.OWNER,
      },
    });

    // Create profile for each owner with complete data
    await db.profile.create({
      data: {
        userId: user.id,
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        avatarUrl: getRandomAvatar(),
        bio: faker.lorem.paragraphs(2),
        location: `${faker.location.city()}, ${faker.location.state()}`,
      },
    });

    // Create 1-2 pets for each owner
    const numPets = faker.number.int({ min: 1, max: 2 });
    for (let j = 0; j < numPets; j++) {
      const petType = faker.helpers.arrayElement(petTypes);
      let breed = '';
      
      switch (petType) {
        case 'dog':
          breed = faker.helpers.arrayElement(dogBreeds);
          break;
        case 'cat':
          breed = faker.helpers.arrayElement(catBreeds);
          break;
        case 'bird':
          breed = faker.helpers.arrayElement(birdBreeds);
          break;
        case 'rabbit':
          breed = faker.helpers.arrayElement(rabbitBreeds);
          break;
      }

      await db.pet.create({
        data: {
          ownerId: user.id,
          name: faker.person.firstName(),
          petType: petType === 'dog' ? '–°–æ–±–∞–∫–∞' : petType === 'cat' ? '–ö–æ—à–∫–∞' : petType === 'bird' ? '–ü—Ç–∏—Ü–∞' : '–ö—Ä–æ–ª–∏–∫',
          breed,
          age: faker.number.int({ min: 1, max: 15 }),
          weight: faker.number.float({ min: 1, max: 50, fractionDigits: 1 }),
          photoUrl: getPetImage(petType),
        },
      });
    }

    if ((i + 1) % 10 === 0) {
      console.log(`   ‚úì Created ${i + 1} owners with pets`);
    }
  }
  console.log('‚úÖ Created 50 OWNER users with profiles and pets');

  // Create Providers - 50 users
  console.log('üìù Creating 50 PROVIDER users...');
  const serviceTypes: ServiceType[] = [
    ServiceType.WALKING,
    ServiceType.SITTING,
    ServiceType.GROOMING,
    ServiceType.VETERINARIAN_VISIT,
    ServiceType.TAXI,
    ServiceType.TRAINING,
  ];

  for (let i = 0; i < 50; i++) {
    const provider = await db.user.create({
      data: {
        email: faker.internet.email(),
        password: hashedPassword,
        role: UserRole.PROVIDER,
      },
    });

    // Create profile for each provider with complete data
    await db.profile.create({
      data: {
        userId: provider.id,
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        avatarUrl: getRandomAvatar(),
        bio: faker.lorem.paragraphs(3),
        location: `${faker.location.city()}, ${faker.location.state()}`,
        servicesProvided: serviceTypes.map(st => st.toLowerCase()).join(', '),
      },
    });

    // Create 1-2 services for each provider
    const numServices = faker.number.int({ min: 1, max: 2 });
    for (let j = 0; j < numServices; j++) {
      const serviceType = faker.helpers.arrayElement(serviceTypes);
      const serviceData = generateServiceData(serviceType);
      
      await db.service.create({
        data: {
          providerId: provider.id,
          serviceType,
          title: faker.helpers.arrayElement(serviceData.titles),
          description: faker.helpers.arrayElement(serviceData.descriptions),
          price: faker.number.float({ min: 15, max: 300, fractionDigits: 2 }),
          imageUrl: getServiceImage(serviceType),
          availability: JSON.stringify({
            monday: { start: '09:00', end: '18:00' },
            tuesday: { start: '09:00', end: '18:00' },
            wednesday: { start: '09:00', end: '18:00' },
            thursday: { start: '09:00', end: '18:00' },
            friday: { start: '09:00', end: '18:00' },
            saturday: { start: '10:00', end: '16:00' },
            sunday: { start: '10:00', end: '16:00' },
          }),
        },
      });
    }

    if ((i + 1) % 10 === 0) {
      console.log(`   ‚úì Created ${i + 1} providers with services`);
    }
  }
  console.log('‚úÖ Created 50 PROVIDER users with profiles and services');

  console.log('üéâ Database seed completed successfully!');
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await db.$disconnect();
  });
