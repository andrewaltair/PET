// Type-Safe Pet Services API Service
// Compatible with useFetchData and useMutateData hooks

// Pet Service Interface - Simplified for marketplace functionality
export interface PetService {
  id: string;
  providerId: string;
  title: string;
  description: string;
  price: number;
  location: string;
  available: boolean;
}

// Create Service Request - excludes 'id' as it's generated by the server
export type CreateServiceRequest = Omit<PetService, 'id'>;

// API Base URL
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api/v1';

// Utility function to get auth token from localStorage
const getAuthToken = (): string | null => {
  return localStorage.getItem('auth_token');
};

// Pet Services API Functions
export const servicesAPI = {
  /**
   * Get service by ID - GET to /api/services/{serviceId}
   * @param serviceId - The ID of the service to fetch
   * @returns Promise<PetService>
   */
  getService: async (serviceId: string): Promise<PetService> => {
    const response = await fetch(`${API_BASE_URL}/services/${serviceId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Failed to fetch service' }));
      throw new Error(errorData.message || 'Failed to fetch service');
    }

    const data = await response.json();
    return data.data || data;
  },

  /**
   * Create a new service - POST to /api/services
   * Requires JWT token for authentication and provider role
   * @param serviceData - The service data to create (without id)
   * @returns Promise<PetService>
   */
  createService: async (serviceData: CreateServiceRequest): Promise<PetService> => {
    const token = getAuthToken();

    if (!token) {
      throw new Error('Authentication required to create service');
    }

    const response = await fetch(`${API_BASE_URL}/services`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(serviceData),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Failed to create service' }));
      throw new Error(errorData.message || 'Failed to create service');
    }

    const data = await response.json();
    return data.data || data;
  },
};

// Export individual functions for direct use with useFetchData and useMutateData
export const getService = servicesAPI.getService;
export const createService = servicesAPI.createService;
